#include <iostream>
#include <string>
#include<vector>
#include<queue>

using namespace std;

vector<vector<int>> bfs(vector<string>& maze,int i,int j)
{
    vector<vector<int>> result(maze.size(),vector<int>(maze[0].length(),-1));
    queue<vector<int>> index;
    result[i][j]=0;
    while(i!=-1)
    {
        if(i!=0&&maze[i-1][j]!='#'&&result[i-1][j]==-1)
        {
            result[i-1][j]=result[i][j]+1;
            index.push({i-1,j});
        }
        if(i!=maze.size()-1&&maze[i+1][j]!='#'&&result[i+1][j]==-1)
        {
            result[i+1][j]=result[i][j]+1;
            index.push({i+1,j});
        }
        if(j!=0&&maze[i][j-1]!='#'&&result[i][j-1]==-1)
        {
            result[i][j-1]=result[i][j]+1;
            index.push({i,j-1});

        }
        if(j!=maze[0].length()-1&&maze[i][j+1]!='#'&&result[i][j+1]==-1)
        {
            result[i][j+1]=result[i][j]+1;
            index.push({i,j+1});
        }
        if(index.empty())
            i=-1;
        else
        {
            i=index.front()[0];
            j=index.front()[1];
            index.pop();
        }
    }
    return result;
}

int minimalSteps(vector<string>& maze) {
    if(maze.empty()||maze[0]=="")
        return 0;
    vector<vector<int>> indexM;
    vector<vector<int>> indexO;
    int indexS[2]={-1,-1};
    int indexT[2]={-1,-1};
    for(int i=0;i<maze.size();i++)
    {
        for(int j=0;j<maze[i].length();j++)
        {
            if(maze[i][j]=='S')
            {
                indexS[0]=i;
                indexS[1]=j;
            }
            else if(maze[i][j]=='M')
            {
                indexM.push_back({i,j});
            }
            else if(maze[i][j]=='O')
            {
                indexO.push_back({i,j});
            }
            else if(maze[i][j]=='T')
            {
                indexT[0]=i;
                indexT[1]=j;
            }
        }
    }
    if(indexS[0]==-1||indexT[0]==-1)
        return -1;

    auto stepS=bfs(maze,indexS[0], indexS[1]);

    if(indexM.empty())
    {
        return stepS[indexT[0]][indexT[1]];
    }

    vector<int> stepO_S; //O到S的最小步数
    for(int i=0;i<indexO.size();i++)
        stepO_S.push_back(stepS[indexO[i][0]][indexO[i][1]]);


    vector<vector<int>> stepO_M(indexO.size(),vector<int>(indexM.size())); //O到M的最小步数
    vector<int> stepM_T; //M到T的最小步数
    for(int i=0;i<indexM.size();i++)
    {
        auto stepM=bfs(maze,indexM[i][0],indexM[i][1]);
        for(int j=0;j<indexO.size();j++)
        {
            stepO_M[j][i]=stepM[indexO[j][0]][indexO[j][1]];
        }
        stepM_T.push_back(stepM[indexT[0]][indexT[1]]);
    }


    vector<int> stepS_M; //S到M的最小步数
    int step=-1;
    for(int i=0;i<indexM.size();i++) //计算stepS_M
    {
        step=-1;
        for(int j=0;j<indexO.size();j++)
        {
            if(stepO_S[j]==-1)
                continue;
            if(stepO_M[j][i]==-1)
                continue;
            if(step==-1||stepO_S[j]+stepO_M[j][i]<step)
                step=stepO_S[j]+stepO_M[j][i];
        }
        stepS_M.push_back(step);
    }

    vector<vector<int>> stepM_M(indexM.size(),vector<int>(indexM.size(),-1)); //M到M的最小步数
    for(int i=0;i<indexM.size();i++) //计算stepM_M
    {
        for(int j=0;j<indexM.size();j++)
        {
            if(i==j)
                continue;
            if(stepM_M[j][i]!=-1)
                stepM_M[i][j]=stepM_M[j][i];
            step=-1;
            for(int t=0;t<indexO.size();t++)
            {
                if(stepO_M[t][i]==-1)
                    continue;
                if(stepO_M[t][j]==-1)
                    continue;
                if(step==-1||stepO_M[t][i]+stepO_M[t][j]<step)
                    step=stepO_M[t][i]+stepO_M[t][j];
            }
            stepM_M[i][j]=step;
        }
    }
    int n=1<<indexM.size();
    vector<vector<int>> dp(n,vector<int>(indexM.size(),-1));
    for(int i=0;i<indexM.size();i++)
    {
        dp[1<<i][i]=stepS_M[i];
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<indexM.size();j++)
        {
            if((i&(1<<j))!=0)
            {
                step=-1;
                for(int t=0;t<indexM.size();t++)
                {
                    if(t==j)
                        continue;
                    if((i&(1<<t))!=0)
                    {
                        int temp=-1;
                        if(dp[(i^(1<<j))][t]!=-1&&stepM_M[t][j]!=-1)
                            temp=dp[(i^(1<<j))][t]+stepM_M[t][j];
                        if(step==-1||temp<step)
                            step=temp;
                    }
                }
                if(step!=-1)
                    dp[i][j]=step;
            }
        }
    }

    int result=-1;
    for(int i=0;i<indexM.size();i++)
    {
        step=-1;
        if(dp[n-1][i]!=-1&&stepM_T[i]!=-1)
            step=dp[n-1][i]+stepM_T[i];
        if(result==-1||step<result)
            result=step;
    }
    return result;
}
int main() {
    vector<string> maze={};
    cout<<minimalSteps(maze)<<endl;
    return 0;
}
